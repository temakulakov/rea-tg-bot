# handlers/workshops.py
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from services import api_client
from datetime import datetime, date
from lang import back
from utils.validators import format_datetime, months

router = Router()  # Router for workshop-related handlers

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
DAYS_RU = {
    "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
    "Wednesday": "–°—Ä–µ–¥–∞",
    "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
    "Friday": "–ü—è—Ç–Ω–∏—Ü–∞",
    "Saturday": "–°—É–±–±–æ—Ç–∞",
    "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
}

@router.message(F.text == "–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã üìê")
async def list_workshop_days(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±—É–¥—É—â–∏–µ –¥–Ω–∏ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –¥–Ω—è –Ω–µ–¥–µ–ª–∏."""
    # workshops = []
    try:
        workshops = await api_client.get_workshops()
    except api_client.ApiError as e:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤: {e}")
        return
    if not workshops:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤.")
        return
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ
    today = datetime.today().date()
    workshops_by_date = {}
    import pprint
    pprint.pprint(workshops)
    for event in workshops:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á 'data' –∏–∑ –æ—Ç–≤–µ—Ç–∞
        print(event)
        date_str = event.get('data')
        if not date_str:
            continue
        try:
            date_obj = datetime.fromisoformat(date_str).date()
        except Exception:
            continue
        if date_obj < today:
            continue  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—à–µ–¥—à–∏–µ —Å–æ–±—ã—Ç–∏—è
        workshops_by_date.setdefault(date_obj, []).append(event)
    if not workshops_by_date:
        await message.answer("–ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤.")
        return
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –¥–Ω—è –Ω–µ–¥–µ–ª–∏
    sorted_dates = sorted(workshops_by_date.keys())
    buttons = []
    for date_obj in sorted_dates:
        day_name = DAYS_RU.get(date_obj.strftime("%A"), "")
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏: (–¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏)DD.MM.YYYY
        date_display = f"{day_name} - {date_obj.day} {months[date_obj.month]}"
        buttons.append([InlineKeyboardButton(text=date_display, callback_data=f"workshop_{date_obj.isoformat()}")])
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    buttons.append([InlineKeyboardButton(text=back, callback_data="workshop_main_menu")])
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(workshops_by_date={d.isoformat(): workshops_by_date[d] for d in workshops_by_date})
    await message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å:", reply_markup=kb)

@router.callback_query(F.data == "workshop_main_menu")
async def workshop_main_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –∏—Å–ø–æ–ª—å–∑—É—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é —Ä–æ–ª—å –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
    await callback.answer()
    data = await state.get_data()
    
    role = data.get("authorized_role")
    
    if role == "companion":
        from handlers.chaperone import show_chaperone_menu
        await show_chaperone_menu(callback.message, state)
    elif role == "speaker":
        from handlers.speaker import conference_back
        await callback.answer()
        await callback.message.delete()
        # await conference_back(callback.message, state)
    else:
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ –Ω–∞–ª–∏—á–∏—é –¥–∞–Ω–Ω—ã—Ö
        if data.get("teacher") and data.get("projects"):
            from handlers.chaperone import show_chaperone_menu
            await show_chaperone_menu(callback.message, state)
        elif data.get("speaker"):
            from handlers.speaker import conference_back
            await callback.answer()
            await callback.message.delete()
            # await conference_back(callback.message, state)
        else:
            # –ë–∞–∑–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            main_menu_kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ú–æ—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è üìÖ", callback_data="show_conference")],
                [InlineKeyboardButton(text="–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã üìê", callback_data="show_workshops")]
            ])
            try:
                await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb)
            except Exception:
                await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb)



@router.callback_query(F.data == "show_workshops")
async def callback_show_workshops(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã üìê" –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å–ø–∏–∫–µ—Ä–∞,
    –≤—ã–∑—ã–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—é list_workshop_days.
    """
    await callback.answer()
    await list_workshop_days(callback.message, state)


@router.callback_query(F.data.startswith("workshop_") & ~F.data.in_(["workshop_back"]))
async def list_workshops_on_day(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å —Å –∫–Ω–æ–ø–∫–∞–º–∏-—Å—Å—ã–ª–∫–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–æ–π '–ù–∞–∑–∞–¥'."""
    await callback.answer()
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏–∑ callback_data, –Ω–∞–ø—Ä–∏–º–µ—Ä, "workshop_2025-03-25"
    iso_date = callback.data.split("_", 1)[1]
    data = await state.get_data()
    workshops_by_date = data.get("workshops_by_date", {})
    events = workshops_by_date.get(iso_date)
    if not events:
        await callback.message.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —É–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
        return
    date_obj = datetime.fromisoformat(iso_date).date()
    day_name = DAYS_RU.get(date_obj.strftime("%A"), "")
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å –¥–Ω–µ–º –Ω–µ–¥–µ–ª–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    date_str = f"{day_name} - {date_obj.day} {months[date_obj.month]}"
    # –§–æ—Ä–º–∏—Ä—É–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: –∫–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ ‚Äì –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å —Å URL-—Å—Å—ã–ª–∫–æ–π
    buttons = []
    for ev in events:
        time = ev.get('time', '')
        title = ev.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        link = ev.get('link')
        button_text = f"{time} ‚Äî {title}" if time else title
        if link:
            buttons.append([InlineKeyboardButton(text=button_text, url=link)])
        else:
            buttons.append([InlineKeyboardButton(text=button_text, callback_data="no_link")])
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –¥–Ω—è
    buttons.append([InlineKeyboardButton(text=back, callback_data="workshop_back")])
    
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.answer(f"*–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã –Ω–∞ {date_str}:*", reply_markup=kb, parse_mode="Markdown", disable_web_page_preview=True)

@router.callback_query(F.data == "workshop_back")
async def workshop_back(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤—ã–±–æ—Ä—É –¥–Ω—è –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –≤ –∫–Ω–æ–ø–∫–∞—Ö."""
    await callback.message.delete()
    from datetime import date  # —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
    await callback.answer()
    data = await state.get_data()
    workshops_by_date = data.get("workshops_by_date")
    if not workshops_by_date:
        await callback.message.answer("–ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤.")
        return
    sorted_dates = sorted([date.fromisoformat(d) for d in workshops_by_date.keys()])
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –≤ —Ä—É—Å—Å–∫–∏–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
    DAYS_RU = {
        "Monday": "–ü–Ω",
        "Tuesday": "–í—Ç",
        "Wednesday": "–°—Ä",
        "Thursday": "–ß—Ç",
        "Friday": "–ü—Ç",
        "Saturday": "–°–±",
        "Sunday": "–í—Å"
    }
    buttons = []
    for date_obj in sorted_dates:
        day_name = DAYS_RU.get(date_obj.strftime("%A"), "")
        date_display = f"({day_name}){format_datetime(date_obj.isoformat())}"
        buttons.append([InlineKeyboardButton(text=date_display, callback_data=f"workshop_{date_obj.isoformat()}")])
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏/–º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤
    buttons.append([InlineKeyboardButton(text=back, callback_data="workshop_main_menu")])
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    # await callback.message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å:", reply_markup=kb)
