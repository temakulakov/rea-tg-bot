# handlers/speaker.py
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, StateFilter
from states.states import SpeakerState
from utils.validators import is_valid_full_name, normalize_name
from services import api_client
from lang import yes, no, cancel, back
from utils.validators import  format_datetime
import datetime

router = Router()

async def show_speaker_menu(message: Message, state: FSMContext):
    data = await state.get_data()
    speaker = data.get("speaker", {})
    school_name = speaker.get("school_name", "–Ω–µ —É–∫–∞–∑–∞–Ω–∞")
    main_menu_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ú–æ—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è üìÖ", callback_data="show_conference")],
        [InlineKeyboardButton(text="–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã üìê", callback_data="show_workshops")]
    ])
    await message.answer(f"üéâ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {speaker.get('name', '')}**! –®–∫–æ–ª–∞: *{school_name}* üè´", parse_mode="Markdown")
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É—á–∞—Å—Ç–Ω–∏–∫–∞ üé§", reply_markup=main_menu_kb)

@router.callback_query(F.data == "role_speaker")
async def start_speaker(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ —Å–ø–∏–∫–µ—Ä–∞."""
    await callback.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback
    data = await state.get_data()
    if data.get("speaker"):
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –µ—Å—Ç—å ‚Äì —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        print(data["speaker"])
        await state.set_state(SpeakerState.confirm_identity)
        await callback.message.edit_text(
            f"üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç—ã? {data['speaker'].get('name', '')} {data['speaker'].get('second_name', '@')}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=yes, callback_data="speaker_yes"),
                 InlineKeyboardButton(text=no, callback_data="speaker_no")]
            ])
        )
    else:
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, —É–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await callback.message.delete()
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –§–ò–û –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π "–û—Ç–º–µ–Ω–∞"
        await state.set_state(SpeakerState.choosing_name)
        cancel_kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await callback.message.answer("–í–≤–µ–¥–∏ —Å–≤–æ—ë –ø–æ–ª–Ω–æ–µ –∏–º—è ‚úèÔ∏è:", reply_markup=cancel_kb, one_time_keyboard=True)

@router.message(Command("start"))
async def start_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–£—á–∞—Å—Ç–Ω–∏–∫ üé§", callback_data="role_speaker")],
        [InlineKeyboardButton(text="–°–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏–π üéì", callback_data="role_chaperone")]
    ])
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ —Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—à—å –∫–∞–∫:", reply_markup=kb)

@router.message(SpeakerState.choosing_name)
async def receive_full_name(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –§–ò–û —Å–ø–∏–∫–µ—Ä–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π."""
    full_name = message.text.strip()
    if full_name.lower() == "–æ—Ç–º–µ–Ω–∞":
        await message.answer("–û—Ç–º–µ–Ω–∞. –ó–∞–ø—É—Å—Ç–∏ /start —Å–Ω–æ–≤–∞.")
        await state.clear()
        return
    if not is_valid_full_name(full_name):
        await message.answer("üòµ‚Äçüí´ –û—à–∏–±–∫–∞: –∏–º—è –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –¥–≤—É—Ö —Å–ª–æ–≤ –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –±—É–∫–≤. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")
        return
    query = normalize_name(full_name)
    speaker_data = await api_client.search_speaker(query)
    print(speaker_data)
    if speaker_data is None:
        await message.answer("üëÄ –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ) –∏–ª–∏ –Ω–∞–∂–º–∏ –û—Ç–º–µ–Ω–∞.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∏ –°–ë–†–ê–°–´–í–ê–ï–ú –∏–Ω–¥–µ–∫—Å –≤ 0
    await state.update_data(
        speakers=speaker_data['data'],
        current_speaker_index=0
    )
    
    await show_next_speaker(message, state)  # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∫–∞–∑ –ø–µ—Ä–≤–æ–≥–æ —Å–ø–∏–∫–µ—Ä–∞
    # await state.update_data(speaker=speaker_data)
    # await state.update_data(authorized_role="speaker")
    # await state.set_state(SpeakerState.confirm_identity)
    # buttons = [
    #     [InlineKeyboardButton(text="–î–∞", callback_data="speaker_yes"),
    #      InlineKeyboardButton(text="–ù–µ—Ç", callback_data="speaker_no")]
    # ]
    # import pprint
    # pprint.pprint(speaker_data)
    
    # for speaker in speaker_data['data']:
    #     response_text = (
    #         f"–ù–∞–π–¥–µ–Ω —Å–ø–∏–∫–µ—Ä:\n"
    #         f"–ò–º—è: {speaker.get('name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    #         f"–§–∞–º–∏–ª–∏—è: {speaker.get('second_name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    #         f"–ü—Ä–æ–µ–∫—Ç: {speaker.get('project_name', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
    #         f"–§–æ—Ä–º–∞—Ç –ø—Ä–æ–µ–∫—Ç–∞: {speaker.get('project_format', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
    #         f"–ù–æ–º–µ—Ä —Å–ª–æ—Ç–∞: {speaker.get('project_slot', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
    #         f"–ö–ª–∞—Å—Å: {speaker.get('school_class', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
    #         f"–®–∫–æ–ª–∞: {speaker.get('school_name', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
    #         f"–≠—Ç–æ —Ç—ã?"
    #     )
        
    #     q = await message.answer(response_text, reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
    #     print("APISBFPUIAS: ", q)
    #     print("XUYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY")

@router.callback_query(StateFilter(SpeakerState.confirm_identity), F.data == "speaker_yes")
async def confirm_speaker_yes(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–ø–∏–∫–µ—Ä–∞."""
    await callback.answer()
    
    data = await state.get_data()
    speakers = data.get("speakers", [])
    current_index = data.get("current_speaker_index", 0)
    
    if current_index >= len(speakers):
        await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –í–´–ë–†–ê–ù–ù–û–ì–û —Å–ø–∏–∫–µ—Ä–∞
    selected_speaker = speakers[current_index]
    await state.update_data(
        speaker=selected_speaker,
        authorized_role="speaker"
    )
    
    await state.set_state(SpeakerState.main_menu)
    
    main_menu_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ú–æ—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è üìÖ", callback_data="show_conference")],
        [InlineKeyboardButton(text="–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã üìê", callback_data="show_workshops")]
    ])
    
    await callback.message.edit_text(
        f"üëè –û—Ç–ª–∏—á–Ω–æ, {selected_speaker.get('name', '')}! –¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã ‚úÖ", 
        reply_markup=main_menu_kb
    )

async def show_next_speaker(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ø–∏–∫–µ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞"""
    data = await state.get_data()
    speakers = data.get("speakers", [])
    current_index = data.get("current_speaker_index", 0)
    
    # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞ —Å–ø–∏—Å–∫–∞
    if current_index >= len(speakers):
        await message.answer("üëÄ –ë–æ–ª—å—à–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–µ—Ç. –í–≤–µ–¥–∏ –∏–º—è —Å–Ω–æ–≤–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ)")
        await state.set_state(SpeakerState.choosing_name)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ —Å–ø–∏–∫–µ—Ä–∞
    current_speaker = speakers[current_index]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    response_text = (
        f"‚ú® –ù–∞–π–¥–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫:\n"
        f"""üë§ *–§–ò–û:* {current_speaker.get('name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\t 
        {current_speaker.get('second_name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\t 
        {current_speaker.get('father_name', '')}\n"""
        f"üìù *–ü—Ä–æ–µ–∫—Ç:*  {current_speaker.get('project_name', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üé§ *–§–æ—Ä–º–∞—Ç –ø—Ä–æ–µ–∫—Ç–∞:* {current_speaker.get('project_format', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üî¢ *–ù–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏:* {int(float(current_speaker.get('project_slot', '–Ω–µ —É–∫–∞–∑–∞–Ω')))}\n"
        f"üë• *–ö–ª–∞—Å—Å:* {current_speaker.get('school_class', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üè´ *–®–∫–æ–ª–∞:* {current_speaker.get('school_name', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        f"üïê *–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:* {format_datetime(current_speaker.get('project_datetime_start', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'))}\n"
        # f"üïï *–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è:* {format_datetime(current_speaker.get('project_datetime_end', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'))}\n"
        f"‚è∞ **–í—Ä–µ–º—è:** {format_datetime(current_speaker.get('project_datetime_start', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'))} ‚Äî {datetime.datetime.fromisoformat(current_speaker.get('project_datetime_end', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')).strftime("%H:%M")}\n"
        f"–≠—Ç–æ —Ç—ã?"
    )
    
    buttons = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=yes, callback_data="speaker_yes"),
         InlineKeyboardButton(text=no, callback_data="speaker_no")]
    ])
    
    await message.answer(response_text, reply_markup=buttons, parse_mode="Markdown",)
    await state.set_state(SpeakerState.confirm_identity)


@router.callback_query(StateFilter(SpeakerState.confirm_identity), F.data == "speaker_no")
async def confirm_speaker_no(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ù–µ—Ç'"""
    await callback.answer()
    
    data = await state.get_data()
    current_index = data.get("current_speaker_index", 0)
    speakers = data.get("speakers", [])
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å
    new_index = current_index + 1
    
    if new_index >= len(speakers):
        # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ø–∏–∫–µ—Ä
        await callback.message.answer("‚ùå –ü–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –í–≤–µ–¥–∏ –∏–º—è —Å–Ω–æ–≤–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ)")
        await state.set_state(SpeakerState.choosing_name)
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ
        await state.update_data(current_speaker_index=new_index)
        await callback.message.delete()  # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await show_next_speaker(callback.message, state)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ

@router.callback_query(F.data == "show_conference")
async def inline_show_conference(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ú–æ—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è' –∏–∑ inline-–º–µ–Ω—é."""
    await callback.answer()
    await show_conference(callback.message, state)

@router.message(SpeakerState.main_menu, F.text == "–ú–æ—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è üìÖ")
async def show_conference(message: Message, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ —Å–ø–∏–∫–µ—Ä–∞ —Å inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π '–ù–∞–∑–∞–¥'."""
    data = await state.get_data()
    speaker = data.get("speaker")
    if not speaker:
        await message.answer("üëÄ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–∞. –ù–∞—á–Ω–∏ —Å /start.")
        await state.clear()
        return
    info_text = (
        f"–¢–≤–æ—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è:\n"
        f"üë§ *–ò–º—è:* {speaker.get('name', '')}\n"
        f"üìù *–ü—Ä–æ–µ–∫—Ç:* {speaker.get('project_name', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
        f"üé§ *–§–æ—Ä–º–∞—Ç –ø—Ä–æ–µ–∫—Ç–∞:* {speaker.get('project_format', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üî¢ *–ù–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏:* {int(float(speaker.get('project_slot', '–Ω–µ —É–∫–∞–∑–∞–Ω')))}\n"
        f"üë• *–ö–ª–∞—Å—Å:* {speaker.get('school_class', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üè´ *–®–∫–æ–ª–∞:* {speaker.get('school_name', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        f"üïê *–í—Ä–µ–º—è:* {speaker.get('project_time', '—É—Ç–æ—á–Ω—è–µ—Ç—Å—è')}\n"
        f"‚è∞ **–í—Ä–µ–º—è:** {format_datetime(speaker.get('project_datetime_start', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'))} ‚Äî {datetime.datetime.fromisoformat(speaker.get('project_datetime_end', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')).strftime("%H:%M")}\n"
    )
    back_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=back, callback_data="conference_back")]
    ])
    img_url = speaker.get("image_url")
    if img_url:
        try:
            await message.answer_photo(photo=img_url, caption=info_text, parse_mode="Markdown", reply_markup=back_kb)
        except Exception:
            await message.answer(info_text + "\n*(–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å)*", parse_mode="Markdown", reply_markup=back_kb)
    else:
        await message.answer(info_text, parse_mode="Markdown", reply_markup=back_kb)

@router.callback_query(F.data == "conference_back")
async def conference_back(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' ‚Äì –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–ø–∏–∫–µ—Ä–∞, —É–±–∏—Ä–∞—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å."""
    await callback.answer()
    main_menu_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ú–æ—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è üìÖ", callback_data="show_conference")],
        [InlineKeyboardButton(text="–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã üìê", callback_data="show_workshops")]
    ])
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if callback.message.photo:
        # await callback.message.delete()
        await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É—á–∞—Å—Ç–Ω–∏–∫–∞:", reply_markup=main_menu_kb)
    # –ï—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
    elif callback.message.text:
        await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É—á–∞—Å—Ç–Ω–∏–∫–∞ üé§", reply_markup=main_menu_kb)
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–º–µ–µ—Ç caption (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é), —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º caption
    elif callback.message.caption:
        await callback.message.edit_caption("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É—á–∞—Å—Ç–Ω–∏–∫–∞ üé§", reply_markup=main_menu_kb)
    else:
        await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É—á–∞—Å—Ç–Ω–∏–∫–∞ üé§", reply_markup=main_menu_kb)